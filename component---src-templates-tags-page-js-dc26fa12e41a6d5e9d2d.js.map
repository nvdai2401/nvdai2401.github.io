{"version":3,"sources":["webpack:///./src/components/PostAbbrev.js","webpack:///./src/components/TagList.js","webpack:///./src/templates/tags-page.js"],"names":["PostAbbrev","spoilerPart","tagsPart","slug","title","date","timeToRead","spoiler","tags","base","dangerouslySetInnerHTML","__html","baseUrl","style","fontFamily","fontSize","rhythm","marginBottom","boxShadow","to","rel","formatDate","formatReadingTime","defaultProps","TagList","restProps","className","map","text","key","url","TagPageTemplate","pageContext","data","location","tag","allMarkdownRemark","edges","totalCount","siteTitle","site","siteMetadata","useLang","lang","homeLink","tagHeader","formatMessage","breadcrumbs","description","node","frontmatter","fields","excerpt","marginTop","pageQuery"],"mappings":"4FAAA,qFAWA,SAASA,EAAT,GAA6E,IACvEC,EAWAC,EAZgBC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KAiBlE,OAfIF,IACFN,EACE,uBACES,wBAAyB,CACvBC,OAAQJ,MAOZC,IACFN,EAAW,kBAAC,IAAD,CAASM,KAAMA,EAAMI,QAAYH,EAAL,UAIvC,iCACE,gCACE,wBACEI,MAAO,CACLC,WAAY,yBACZC,SAAUC,YAAO,GACjBC,aAAcD,YAAO,OAGvB,kBAAC,OAAD,CAAMH,MAAO,CAAEK,UAAW,QAAUC,GAAIhB,EAAMiB,IAAI,YAC/ChB,IAIL,+BAAWiB,YAAWhB,GAAtB,MAAiCiB,4BAC/BhB,IAEDJ,EACAD,IAgBTD,EAAWuB,aAAe,CACxBnB,MAAO,KACPG,QAAS,KACTC,KAAM,KACNC,KAAM,IAGOT,O,mIChEf,SAASwB,EAAT,GAAmD,IAAhChB,EAA+B,EAA/BA,KAAMI,EAAyB,EAAzBA,QAAYa,E,oIAAa,uBAChD,OACE,sCAAIC,UAAU,UAAaD,EAA3B,CAAsCZ,MAAO,CAAEI,aAAc,MAC1DT,EAAKmB,KAAI,SAAAC,GAAI,OACZ,wBAAIC,IAAKD,GACP,kBAAC,IAAD,CAAKA,KAAMA,EAAME,IAAQlB,EAAL,IAAgBgB,SAY9CJ,EAAQD,aAAe,CACrBX,QAAS,IAGIY,O,kCC3Bf,8JA0FeO,UA3ES,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACpCC,EAAQH,EAARG,IADmD,EAE7BF,EAAKG,kBAA3BC,EAFmD,EAEnDA,MAAOC,EAF4C,EAE5CA,WACTC,EAAYN,EAAKO,KAAKC,aAAarC,MAHkB,EAIhCsC,cAAnBC,EAJmD,EAInDA,KAAMC,EAJ6C,EAI7CA,SACRC,EAAYC,YAAc,cAAeR,EAAYH,GAE3D,OACE,kBAAC,IAAD,CACED,SAAUA,EACV9B,MAAOmC,EACPQ,YAAa,CACX,CAAEnB,KAAMkB,YAAc,SAAUhB,IAAQc,EAAL,QACnC,CAAEhB,KAAMO,KAGV,kBAAC,IAAD,CAAK/B,MAAOyC,EAAWG,YAAaH,IACpC,wBACEhC,MAAO,CACLI,aAAcD,YAAO,KAGtB6B,GAEH,8BACGR,EAAMV,KAAI,YAAe,IAAZsB,EAAW,EAAXA,KACN7C,EAAQ6C,EAAKC,YAAY9C,OAAS6C,EAAKE,OAAOhD,KACpD,OACE,kBAAC,IAAD,CACE0B,IAAKoB,EAAKE,OAAOhD,KACjBM,KAAMmC,EACND,KAAMA,EACNxC,KAAM8C,EAAKE,OAAOhD,KAClBE,KAAM4C,EAAKC,YAAY7C,KACvBC,WAAY2C,EAAK3C,WACjBF,MAAOA,EACPG,QAAS0C,EAAKC,YAAY3C,SAAW0C,EAAKG,QAC1C5C,KAAMyC,EAAKC,YAAY1C,WAK/B,yBAAKK,MAAO,CAAEwC,UAAW,MACzB,+BACE,kBAAC,IAAD,SAiCD,IAAMC,EAAS","file":"component---src-templates-tags-page-js-dc26fa12e41a6d5e9d2d.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Link } from 'gatsby'\r\n\r\nimport { rhythm } from '../utils/typography'\r\nimport { formatReadingTime } from '../utils/helpers'\r\nimport { formatDate } from '../utils/i18n'\r\n\r\nimport TagList from './TagList'\r\n\r\nfunction PostAbbrev({ slug, title, date, timeToRead, spoiler, tags, base }) {\r\n  let spoilerPart\r\n  if (spoiler) {\r\n    spoilerPart = (\r\n      <p\r\n        dangerouslySetInnerHTML={{\r\n          __html: spoiler,\r\n        }}\r\n      />\r\n    )\r\n  }\r\n\r\n  let tagsPart\r\n  if (tags) {\r\n    tagsPart = <TagList tags={tags} baseUrl={`${base}tags`} />\r\n  }\r\n\r\n  return (\r\n    <article>\r\n      <header>\r\n        <h3\r\n          style={{\r\n            fontFamily: 'Montserrat, sans-serif',\r\n            fontSize: rhythm(1),\r\n            marginBottom: rhythm(1 / 4),\r\n          }}\r\n        >\r\n          <Link style={{ boxShadow: 'none' }} to={slug} rel=\"bookmark\">\r\n            {title}\r\n          </Link>\r\n        </h3>\r\n\r\n        <small>{`${formatDate(date)} â€¢ ${formatReadingTime(\r\n          timeToRead\r\n        )}`}</small>\r\n        {tagsPart}\r\n        {spoilerPart}\r\n      </header>\r\n    </article>\r\n  )\r\n}\r\n\r\nPostAbbrev.propTypes = {\r\n  slug: PropTypes.string.isRequired,\r\n  title: PropTypes.string,\r\n  date: PropTypes.string.isRequired,\r\n  timeToRead: PropTypes.number.isRequired,\r\n  spoiler: PropTypes.string,\r\n  tags: PropTypes.array,\r\n  base: PropTypes.string,\r\n}\r\n\r\nPostAbbrev.defaultProps = {\r\n  title: null,\r\n  spoiler: null,\r\n  tags: null,\r\n  base: '',\r\n}\r\n\r\nexport default PostAbbrev\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Tag from './Tag'\r\nimport './TagList.css'\r\n\r\nfunction TagList({ tags, baseUrl, ...restProps }) {\r\n  return (\r\n    <ul className=\"tag-ul\" {...restProps} style={{ marginBottom: 12 }}>\r\n      {tags.map(text => (\r\n        <li key={text}>\r\n          <Tag text={text} url={`${baseUrl}/${text}`} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nTagList.propTypes = {\r\n  tags: PropTypes.array.isRequired,\r\n  baseUrl: PropTypes.string,\r\n}\r\n\r\nTagList.defaultProps = {\r\n  baseUrl: '',\r\n}\r\n\r\nexport default TagList\r\n","/* eslint-disable react/prop-types */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// Components\r\nimport { graphql } from 'gatsby'\r\n\r\nimport Layout from '../components/Layout'\r\nimport SEO from '../components/SEO'\r\nimport PostAbbrev from '../components/PostAbbrev'\r\nimport Bio from '../components/Bio'\r\nimport { useLang } from '../context/LanguageContext'\r\nimport { formatMessage } from '../utils/i18n'\r\nimport { rhythm } from '../utils/typography'\r\n\r\nconst TagPageTemplate = ({ pageContext, data, location }) => {\r\n  const { tag } = pageContext\r\n  const { edges, totalCount } = data.allMarkdownRemark\r\n  const siteTitle = data.site.siteMetadata.title\r\n  const { lang, homeLink } = useLang()\r\n  const tagHeader = formatMessage('tfTagHeader', totalCount, tag)\r\n\r\n  return (\r\n    <Layout\r\n      location={location}\r\n      title={siteTitle}\r\n      breadcrumbs={[\r\n        { text: formatMessage('tTags'), url: `${homeLink}tags` },\r\n        { text: tag },\r\n      ]}\r\n    >\r\n      <SEO title={tagHeader} description={tagHeader} />\r\n      <h3\r\n        style={{\r\n          marginBottom: rhythm(1),\r\n        }}\r\n      >\r\n        {tagHeader}\r\n      </h3>\r\n      <main>\r\n        {edges.map(({ node }) => {\r\n          const title = node.frontmatter.title || node.fields.slug\r\n          return (\r\n            <PostAbbrev\r\n              key={node.fields.slug}\r\n              base={homeLink}\r\n              lang={lang}\r\n              slug={node.fields.slug}\r\n              date={node.frontmatter.date}\r\n              timeToRead={node.timeToRead}\r\n              title={title}\r\n              spoiler={node.frontmatter.spoiler || node.excerpt}\r\n              tags={node.frontmatter.tags}\r\n            />\r\n          )\r\n        })}\r\n      </main>\r\n      <div style={{ marginTop: 50 }} />\r\n      <aside>\r\n        <Bio />\r\n      </aside>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nTagPageTemplate.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n            }),\r\n            fields: PropTypes.shape({\r\n              slug: PropTypes.string.isRequired,\r\n              langKey: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }).isRequired,\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default TagPageTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query TagPage($tag: String, $langKey: String) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      limit: 1000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: {\r\n        frontmatter: { tags: { in: [$tag] } }\r\n        fields: { langKey: { eq: $langKey } }\r\n      }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          timeToRead\r\n          fields {\r\n            slug\r\n            langKey\r\n          }\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            spoiler\r\n            tags\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}